const { Events, TextInputBuilder, TextInputStyle, ActionRowBuilder, ModalBuilder, ChannelType, PermissionsBitField, EmbedBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const { writeFile } = require('fs')
const fiche_json = require("../database/fiche-rp.json")
function SaveFicheBDD() {
    writeFile("./database/fiche-rp.json", JSON.stringify(fiche_json), (err) => { })
}
function R√©initialiseDisableButton(interaction) {
    const R√©initialiseDisableButton = new Promise((resolve) => {
        let messages_row_√†_d√©sac = interaction.channel.lastMessage
        let row_√†_d√©sac = messages_row_√†_d√©sac.components[0].components
    
        const row_d√©sac = new ActionRowBuilder()
    
        for (let a = 0; a < row_√†_d√©sac.length; a++) {
            const button_d√©sac = new ButtonBuilder(row_√†_d√©sac[a].data).setDisabled(true).setStyle(ButtonStyle.Danger)
            row_d√©sac.addComponents([button_d√©sac])
        }
    
        messages_row_√†_d√©sac.edit({
            embeds: messages_row_√†_d√©sac.embeds,
            components: [row_d√©sac]
        }).then(() => {
            resolve()
        })
    })

    return R√©initialiseDisableButton
}


module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {


        /** Cr√©ation d'un personnage **/
        if (interaction.isButton()) {
            if (interaction.customId === "creation_perso_button") {
                if (fiche_json[interaction.user.id]) {
                    interaction.reply({
                        content: "Vous avez d√©j√† cr√©√© un personnage !",
                        ephemeral: true
                    })
                } else {
                    const text_input_nom = new TextInputBuilder({
                        customId: "question_input_nom",
                        label: "Nom du personnage",
                        required: false,
                        style: TextInputStyle.Short,
                        min_length: 2,
                    })
                    const text_input_pr√©nom = new TextInputBuilder({
                        customId: "question_input_pr√©nom",
                        label: "Pr√©nom du personnage",
                        required: true,
                        style: TextInputStyle.Short,
                        min_length: 2,
                    })

                    const action_row_question_nom = new ActionRowBuilder({ components: [text_input_nom] })
                    const action_row_question_pr√©nom = new ActionRowBuilder({ components: [text_input_pr√©nom] })

                    const modals_questionnaire1 = new ModalBuilder({
                        components: [action_row_question_nom, action_row_question_pr√©nom],
                        customId: "questionnaire_modals_1",
                        title: "Cr√©ation d'un personnage"
                    })

                    await interaction.showModal(modals_questionnaire1)
                }
            }
        }
        if (interaction.isModalSubmit()) {
            if (interaction.customId === "questionnaire_modals_1") {
                let nom_fields = interaction.fields.getTextInputValue("question_input_nom")
                let pr√©nom_fields = interaction.fields.getTextInputValue("question_input_pr√©nom")

                let name = `${nom_fields}_${pr√©nom_fields}`
                if (nom_fields === "") {
                    name = `${pr√©nom_fields}`
                }

                function nom(nooo) {
                    if (nooo === "") {
                        return "()"
                    }
                    return nom_fields
                }

                fiche_json[interaction.user.id] = {}
                fiche_json[interaction.user.id]["nom"] = nom_fields
                fiche_json[interaction.user.id]["pr√©nom"] = pr√©nom_fields
                fiche_json[interaction.user.id]["avanc√©_histoire"] = "0.1"

                await interaction.guild.channels.create({
                    name: name,
                    type: ChannelType.GuildText,
                    topic: `Avanc√© dans l'histoire : ${fiche_json[interaction.user.id]["avanc√©_histoire"]}`,
                    permissionOverwrites: [
                        {
                            id: interaction.user.id,
                            allow: [PermissionsBitField.Flags.ViewChannel]
                        }
                    ],
                    parent: interaction.channel.parent
                }).then((channel) => {
                    const remplissage_infos_button_√¢ge = new ButtonBuilder({
                        customId: "remplissage_infos_√¢ge",
                        emoji: {
                            name: 'üí¨'
                        },
                        label: 'R√©pondre',
                        style: ButtonStyle.Primary,
                        disabled: false
                    })

                    const remplissage_infos_row = new ActionRowBuilder({
                        components: [remplissage_infos_button_√¢ge]
                    })

                    const remplissage_infos_embeds = new EmbedBuilder({
                        author: {
                            name: interaction.user.username,
                            icon_url: interaction.user.displayAvatarURL()
                        },
                        description: `Hmmm...
                        
                        Ah ! Bonjour ! Tu dois √™tre... ${fiche_json[interaction.user.id]["pr√©nom"]} ? Ah oui, je me disais bien que tu devais √™tre une personne que je connaissais bien !
                        
                        Je sais que tu dois te dire ce que tu fais ici, dans une zone inter-dimensionnelle. Mais ne t'inqui√®tes pas, je vais t'expliquer... Alors, je me pr√©sente, moi c'est l'Invocateur, je suis une sorte de guide pour toutes personnes qui entrent dans le monde..., toutes les autres personnes comme toi poss√®dent un lien de communication avec moi !
                        
                        Mais avant de continuer, j'aimerais savoir... quel √¢ge as-tu ?`,
                        footer: {
                            text: "Avanc√© de l'histoire : " + fiche_json[interaction.user.id]["avanc√©_histoire"],
                        },
                        image: {
                            url: "https://wallpapers.com/images/hd/fantasy-space-0us40pagx65ges3f.jpg"
                        },
                    })
                        .setColor('LuminousVividPink')
                        .setTimestamp()

                    channel.send({
                        embeds: [remplissage_infos_embeds],
                        components: [remplissage_infos_row]
                    })

                }).then(() => {
                    interaction.guild.channels.edit("1122131842125025350", {
                        permissionOverwrites: [
                            {
                                id: interaction.user.id,
                                allow: [PermissionsBitField.Flags.ViewChannel]
                            },
                        ]
                    })
                }).then(() => {
                    const joueur_rp_role = interaction.guild.roles.cache.get('914595477150892093')
                    interaction.member.roles.add(joueur_rp_role)
                }).then(() => {
                    SaveFicheBDD()
                })



                await interaction.reply({
                    content: "F√©cilitation ! Le personnage a correctement √©t√© cr√©√© !",
                    ephemeral: true
                })
            }
        }


        /** Renseignement d'informations suppl√©mentaire **/
        if (interaction.isButton()) {

            /** √ÇGE **/
            if (interaction.customId === "remplissage_infos_√¢ge") {
                const remplissage_infos_√¢ges_input = new TextInputBuilder({
                    custom_id: "remplissage_infos_√¢ges_input",
                    label: "R√©ponse",
                    placeholder: "9 ~ 40",
                    min_length: 1,
                    max_length: 2,
                    required: true,
                    style: TextInputStyle.Short,
                })

                const action_row_remplissage_infos_√¢ges = new ActionRowBuilder({
                    components: [remplissage_infos_√¢ges_input],
                })

                const modals_remplissage_infos_√¢ges = new ModalBuilder({
                    components: [action_row_remplissage_infos_√¢ges],
                    custom_id: "remplissage_infos_√¢ges_modals",
                    title: "Quel est l'√¢ge de ton personnage ?"
                })

                interaction.showModal(modals_remplissage_infos_√¢ges)
            }

            /** ORIGINE **/
            if (interaction.customId === "remplissage_infos_origine") {

            }

            /** GENRE **/
            if (interaction.customId === "remplissage_infos_genre") {

            }

        }
        if (interaction.isModalSubmit()) {

            /** √Çge **/
            if (interaction.customId === "remplissage_infos_√¢ges_modals") {
                R√©initialiseDisableButton(interaction).then(() => {
                    let √¢ge_fields = interaction.fields.getTextInputValue("remplissage_infos_√¢ges_input")
                    let √¢ge_int = parseInt(√¢ge_fields)
                    if (isNaN(√¢ge_int)) {
                        const error_NaN_√¢ge = new EmbedBuilder({
                            author: {
                                name: interaction.user.username,
                                icon_url: interaction.user.displayAvatarURL(),
                            },
                            description: `Alors, je ne peux pas te voir, mais je suis presque s√ªr que ce n'est pas ton √¢ge... M√™me si c'est tr√®s dr√¥le comme r√©ponse... Mais plus s√©rieusement, quel √¢ge as-tu ?`,
                            footer: {
                                text: "Avanc√© de l'histoire : " + fiche_json[interaction.user.id]["avanc√©_histoire"],
                            },
                        }).setColor('Red')

                        const remplissage_infos_button_√¢ge = new ButtonBuilder({
                            customId: "remplissage_infos_√¢ge",
                            emoji: {
                                name: 'üí¨'
                            },
                            label: 'R√©pondre',
                            style: ButtonStyle.Primary,
                            disabled: false
                        })
    
                        const remplissage_infos_row = new ActionRowBuilder({
                            components: [remplissage_infos_button_√¢ge]
                        })

                        interaction.reply({
                            embeds: [error_NaN_√¢ge],
                            components: [remplissage_infos_row]
                        })
                    } else if (√¢ge_int > 40 || √¢ge_int < 9) {
                        const error_NaN_√¢ge = new EmbedBuilder({
                            author: {
                                name: interaction.user.username,
                                icon_url: interaction.user.displayAvatarURL(),
                            },
                            description: `Alors... Il me semble que tu es trop ${√¢ge_int > 40 ? "√¢g√©(e)" : "jeune"} pour rejoindre l'aventure... Normalement, la tranche d'√¢ge que je m'√©tais d√©fini √©tait d'entre 9 ans et 40 ans. Mais dans ce cas, je pense que tu te moques un peu de moi. Plus s√©rieusement, quel √¢ge as-tu ?`,
                            footer: {
                                text: "Avanc√© de l'histoire : " + fiche_json[interaction.user.id]["avanc√©_histoire"],
                            },
                        }).setColor('Red')

                        const remplissage_infos_button_√¢ge = new ButtonBuilder({
                            customId: "remplissage_infos_√¢ge",
                            emoji: {
                                name: 'üí¨'
                            },
                            label: 'R√©pondre',
                            style: ButtonStyle.Primary,
                            disabled: false
                        })
    
                        const remplissage_infos_row = new ActionRowBuilder({
                            components: [remplissage_infos_button_√¢ge]
                        })

                        interaction.reply({
                            embeds: [error_NaN_√¢ge],
                            components: [remplissage_infos_row]
                        })
                    } else {
                        
                    }
                })
            }

        }


    }
}